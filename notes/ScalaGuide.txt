Notes from https://docs.scala-lang.org/tutorials/scala-for-java-programmers.html

A First Example
---------------

object HelloWorld {
  def main(args: Array[String]) {
    println("Hello, world!")
  }
}

The main method does not return a value (it is a procedure method). Therefore, it is not necessary to declare a return type.

object declaration containing the main method. Such a declaration introduces what is commonly known as a singleton object, that is a class with a single instance. 

The declaration above thus declares both a class called HelloWorld and an instance of that class, also called HelloWorld. 

This instance is created on demand, the first time it is used.

The astute reader might have noticed that the main method is not declared as static here. This is because static members (methods or fields) do not exist in Scala. 
Rather than defining static members, the Scala programmer declares these members in singleton objects.

compile and run:
> scalac HelloWorld.scala
> scala -classpath . HelloWorld

Interaction with Java
---------------------
All classes from the java.lang package are imported by default, while others need to be imported explicitly.

Multiple classes can be imported from the same package by enclosing them in curly braces as on the first line. 

Another difference is that when importing all the names of a package or class, one uses the underscore character (_) instead of the asterisk (*). 
That’s because the asterisk is a valid Scala identifier (e.g. method name), as we will see later.

Methods taking one argument can be used with an infix syntax

ex: 
---
df format now
df.format(now)

it should be noted that it is also possible to inherit from Java classes and implement Java interfaces directly in Scala.

Everything is an Object
-----------------------

Scala is a pure object-oriented language in the sense that everything is an object, including numbers or functions. 
It differs from Java in that respect, since Java distinguishes primitive types (such as boolean and int) 
from reference types, and does not enable one to manipulate functions as values.

Functions are objects
---------------------
Perhaps more surprising for the Java programmer, functions are also objects in Scala. 
It is therefore possible to pass functions as arguments, to store them in variables, and to return them from other functions. 
This ability to manipulate functions as values is one of the cornerstone of a very interesting programming paradigm called functional programming.

Classes
-------
Scala is an object-oriented language, and as such it has a concept of class.

Classes in Scala are declared using a syntax which is close to Java’s syntax. 
One important difference is that classes in Scala can have parameters.
 
Inheritance and overriding
--------------------------
All classes in Scala inherit from a super-class. When no super-class is specified, scala.AnyRef is implicitly used.